name: 'Probe Action'
description: 'Run probe workflow automation tool'
author: 'linyows'

inputs:
  path:
    description: 'Path to the workflow YAML file'
    required: true
  version:
    description: 'Version of probe to use (default: latest)'
    required: false
    default: 'latest'
  verbose:
    description: 'Enable verbose output'
    required: false
    default: 'false'
  response-time:
    description: 'Show response times'
    required: false
    default: 'false'
  action-debug:
    description: 'Enable action debug output (true/false/yes/1)'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Download and run probe
      run: |
        set -euo pipefail
        
        # Check action-debug flag
        DEBUG_INPUT="${{ inputs.action-debug }}"
        if [ "${DEBUG_INPUT,,}" = "true" ] || [ "${DEBUG_INPUT}" = "1" ] || [ "${DEBUG_INPUT,,}" = "yes" ]; then
          ACTION_DEBUG=true
        else
          ACTION_DEBUG=false
        fi

        # Debug: Show environment info (only if action-debug is enabled)
        if [ "$ACTION_DEBUG" = "true" ]; then
          echo "Debug: OS=$(uname -s), ARCH=$(uname -m)"
          echo "Debug: Current directory: $(pwd)"
          echo "Debug: Available files: $(ls -la)"
        fi

        # Determine OS and architecture
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')
        ARCH=$(uname -m)

        # Only support Linux for now
        if [ "$OS" != "linux" ]; then
          echo "Error: Currently only Linux is supported"
          echo "Detected OS: $OS"
          exit 1
        fi

        case $ARCH in
          x86_64) ARCH="x86_64" ;;
          aarch64|arm64) ARCH="arm64" ;;
          *) 
            echo "Error: Unsupported architecture: $ARCH" 
            echo "Supported architectures: x86_64, aarch64, arm64"
            exit 1 
            ;;
        esac

        if [ "$ACTION_DEBUG" = "true" ]; then
          echo "Detected platform: ${OS}_${ARCH}"
        fi

        # Set version
        if [ "${{ inputs.version }}" = "latest" ]; then
          if [ "$ACTION_DEBUG" = "true" ]; then
            echo "Fetching latest version from GitHub API..."
          fi
          
          # Try to get latest version from GitHub API with authentication
          if [ -n "${{ github.token }}" ]; then
            VERSION=$(curl -s -H "Authorization: token ${{ github.token }}" \
              https://api.github.com/repos/linyows/probe/releases/latest | \
              grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' | tr -d '\r')
          else
            VERSION=$(curl -s https://api.github.com/repos/linyows/probe/releases/latest | \
              grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' | tr -d '\r')
          fi
          
          # Fallback to known version if API fails
          if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
            if [ "$ACTION_DEBUG" = "true" ]; then
              echo "Failed to fetch from API, using fallback version v0.20.1"
            fi
            VERSION="v0.20.1"
          elif [ "$ACTION_DEBUG" = "true" ]; then
            echo "Successfully fetched version: $VERSION"
          fi
        else
          VERSION="${{ inputs.version }}"
        fi

        if [ "$ACTION_DEBUG" = "true" ]; then
          echo "Using probe version: $VERSION"
        fi

        # Download probe
        DOWNLOAD_URL="https://github.com/linyows/probe/releases/download/${VERSION}/probe_${OS}_${ARCH}.tar.gz"
        if [ "$ACTION_DEBUG" = "true" ]; then
          echo "Downloading from: $DOWNLOAD_URL"
        fi

        if ! curl -L -f -s -S -o probe.tar.gz "$DOWNLOAD_URL"; then
          echo "Error: Failed to download probe from $DOWNLOAD_URL"
          echo "Please check if the version exists and supports your platform"
          exit 1
        fi

        # Verify download
        if [ ! -f probe.tar.gz ]; then
          echo "Error: probe.tar.gz not found after download"
          exit 1
        fi

        if [ "$ACTION_DEBUG" = "true" ]; then
          echo "Download successful, extracting..."
        fi

        # Extract binary
        if ! tar -xzf probe.tar.gz; then
          echo "Error: Failed to extract probe.tar.gz"
          exit 1
        fi

        # Verify extraction
        if [ ! -f probe ]; then
          echo "Error: probe binary not found after extraction"
          echo "Archive contents:"
          tar -tzf probe.tar.gz || echo "Failed to list archive contents"
          exit 1
        fi

        chmod +x probe
        if [ "$ACTION_DEBUG" = "true" ]; then
          echo "Probe binary ready: $(./probe --version 2>/dev/null || echo 'version check failed')"
        fi

        # Verify workflow file exists
        if [ ! -f "${{ inputs.path }}" ]; then
          echo "Error: Workflow file not found: ${{ inputs.path }}"
          if [ "$ACTION_DEBUG" = "true" ]; then
            echo "Current directory contents:"
            find . -name "*.yml" -o -name "*.yaml" | head -10
          fi
          exit 1
        fi

        # Build command arguments
        PROBE_ARGS=""

        # Check verbose flag (supports various boolean formats)
        VERBOSE_INPUT="${{ inputs.verbose }}"
        if [ "${VERBOSE_INPUT,,}" = "true" ] || [ "${VERBOSE_INPUT}" = "1" ] || [ "${VERBOSE_INPUT,,}" = "yes" ]; then
          PROBE_ARGS="$PROBE_ARGS --verbose"
        fi

        # Check response-time flag (supports various boolean formats)  
        RT_INPUT="${{ inputs.response-time }}"
        if [ "${RT_INPUT,,}" = "true" ] || [ "${RT_INPUT}" = "1" ] || [ "${RT_INPUT,,}" = "yes" ]; then
          PROBE_ARGS="$PROBE_ARGS --rt"
        fi

        # Run probe
        if [ "$ACTION_DEBUG" = "true" ]; then
          echo "Running probe with workflow: ${{ inputs.path }}"
          echo "Command: FORCE_COLOR=1 ./probe${PROBE_ARGS} ${{ inputs.path }}"
        fi

        FORCE_COLOR=1 ./probe $PROBE_ARGS "${{ inputs.path }}"
      shell: bash

branding:
  icon: 'activity'
  color: 'blue'
